    LUTs     FFs   BRAMs    DSPs : BreastMammogramROIExtractionKernel.maxj
    3290    3611      32       2 : resources used by this file
   0.63%   0.34%   1.25%   0.10% : % of available
  30.74%  24.10%  35.16% 100.00% : % of total used
  88.56%  74.67%  94.12% 100.00% : % of user resources

                                 : package com.bioirc.breastmammogramroiextraction;
                                 : 
                                 : import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
                                 : import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
                                 : import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
                                 : import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
                                 : import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
                                 : 
                                 : public class BreastMammogramROIExtractionKernel extends Kernel {
                                 : 	public BreastMammogramROIExtractionKernel(KernelParameters parameters) {
                                 : 		super(parameters);
                                 : 
                                 : 		OffsetExpr loopLength = stream.makeOffsetAutoLoop("loopLength");
                                 : 		DFEVar loopLengthVal = loopLength.getDFEVar(this, dfeUInt(32));
                                 : 
      78     101       0       0 : 		DFEVar loopCounter = control.count.simpleCounter(32, loopLengthVal);
                                 : 
       8      38       0       0 : 		DFEVar image_pixel = io.input("image_pixel", dfeUInt(32), loopCounter.eq(loopLengthVal-1));
                                 : 
                                 : 		DFEVar width = io.scalarInput("width", dfeUInt(32));
                                 : 		DFEVar height = io.scalarInput("height", dfeUInt(32));
                                 : 		DFEVar black = io.scalarInput("black", dfeUInt(32));
                                 : 		DFEVar threshold = io.scalarInput("threshold", dfeUInt(32));
                                 : 
                                 : 		DFEVar above_pixel = dfeUInt(32).newInstance(this);
                                 : 
                                 : 		DFEVar prev_pixel = stream.offset(image_pixel, -loopLength);
                                 : 
                                 : 		CounterChain chain = control.count.makeCounterChain();
     108     101       0       0 : 		DFEVar i = chain.addCounter(height, 1);
     107     165       0       2 : 		DFEVar j = chain.addCounter(width * loopLengthVal, 1);
                                 : 
                                 : 		DFEVar tempWhite = dfeUInt(32).newInstance(this);
                                 : 
       0      35       0       0 : 		DFEVar firstWhite = ((j < loopLengthVal)) ? 0 : tempWhite;
                                 : 
                                 : 		DFEVar result;
                                 : 
                                 : 		result = image_pixel;
                                 : 
      15      39       0       0 : 		result = ((i.eq(0)) & (firstWhite > 1)) ? 0 : result;
                                 : 
      43      43       0       0 : 		result = ((i > 0) & (firstWhite > 1) & (above_pixel < black)) ? 0 : result;
                                 : 
    1418    1498      16       0 : 		result = ((i <= height/10) & (image_pixel >= threshold)) ? 0 : result;
                                 : 
    1386    1502      16       0 : 		result = ((i > height/10) & (image_pixel >= threshold) & (above_pixel.eq(0))) ? 0 : result;
                                 : 
                                 : 		above_pixel <== stream.offset(result, -1024*loopLength);
                                 : 
     125      84       0       0 : 		tempWhite <== ((image_pixel >= black) & (prev_pixel < black) & (j >= loopLengthVal)) | ((j < loopLengthVal) & (image_pixel >= black)) ? stream.offset(firstWhite+1, -loopLength) : stream.offset(firstWhite, -loopLength);
                                 : 
       2       5       0       0 : 		io.output("output", result, dfeUInt(32), loopCounter.eq(loopLengthVal -1));
                                 : 	}
                                 : }
